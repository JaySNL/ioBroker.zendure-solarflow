{
  "version": 3,
  "sources": ["../../src/helpers/createSolarFlowLocalStates.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\n\nimport { ZendureSolarflow } from \"../main\";\nimport { ISolarflowState } from \"../models/ISolarflowState\";\nimport { createCalculationStates } from \"./createCalculationStates\";\nimport { createControlStates } from \"./createControlStates\";\nimport { getStateDefinition } from \"./createSolarFlowStates\";\nimport { getProductNameFromProductKey } from \"./helpers\";\n//import { deleteCalculationStates } from \"./deleteCalculationStates\";\n\nexport const createSolarFlowLocalStates = async (\n  adapter: ZendureSolarflow,\n  productKey: string,\n  deviceKey: string\n): Promise<void> => {\n  productKey = productKey.replace(adapter.FORBIDDEN_CHARS, \"\");\n  deviceKey = deviceKey.replace(adapter.FORBIDDEN_CHARS, \"\");\n\n  const productName = getProductNameFromProductKey(productKey);\n\n  if (productName == \"\") {\n    adapter.log.error(\n      `[createSolarFlowLocalStates] Unknown product (${productKey}/${deviceKey}). We cannot create control states! Please contact the developer!`\n    );\n    return;\n  }\n\n  adapter.log.debug(\n    `[createSolarFlowLocalStates] Creating or updating SolarFlow states for ${productName} (${productKey}/${deviceKey}).`\n  );\n\n  // Create device (e.g. the product type -> SolarFlow)\n  await adapter?.extendObject(productKey, {\n    type: \"device\",\n    common: {\n      name: {\n        de: `${productName} (${productKey})`,\n        en: `${productName} (${productKey})`,\n      },\n    },\n    native: {},\n  });\n\n  // Create channel (e.g. the device specific key)\n  await adapter?.extendObject(productKey + \".\" + deviceKey, {\n    type: \"channel\",\n    common: {\n      name: {\n        de: `Device Key ${deviceKey}`,\n        en: `Device Key ${deviceKey}`,\n      },\n    },\n    native: {},\n  });\n\n  // Create pack data folder\n  if (productName?.toLowerCase().includes(\"smart plug\")) {\n    await adapter?.extendObject(`${productKey}.${deviceKey}.packData`, {\n      type: \"channel\",\n      common: {\n        name: {\n          de: \"Batterie Packs\",\n          en: \"Battery packs\",\n        },\n      },\n      native: {},\n    });\n  }\n\n  const states = getStateDefinition(productName);\n\n  states.forEach(async (state: ISolarflowState) => {\n    await adapter?.extendObject(`${productKey}.${deviceKey}.${state.title}`, {\n      type: \"state\",\n      common: {\n        name: {\n          de: state.nameDe,\n          en: state.nameEn,\n        },\n        type: state.type,\n        desc: state.title,\n        role: state.role,\n        read: true,\n        write: false,\n        unit: state.unit,\n        states: state.states,\n      },\n      native: {},\n    });\n  });\n\n  // Create control states\n  await createControlStates(adapter, productKey, deviceKey, productName);\n\n  if (adapter.config.useCalculation) {\n    // Create calculations folder\n    await adapter?.extendObject(`${productKey}.${deviceKey}.calculations`, {\n      type: \"channel\",\n      common: {\n        name: {\n          de: \"Berechnungen f\u00FCr Ger\u00E4t \" + deviceKey,\n          en: \"Calculations for Device \" + deviceKey,\n        },\n      },\n      native: {},\n    });\n\n    await createCalculationStates(adapter, productKey, deviceKey);\n  } else {\n    //await deleteCalculationStates(adapter, productKey, deviceKey);\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qCAAwC;AACxC,iCAAoC;AACpC,mCAAmC;AACnC,qBAA6C;AAGtC,MAAM,6BAA6B,OACxC,SACA,YACA,cACkB;AAClB,eAAa,WAAW,QAAQ,QAAQ,iBAAiB,EAAE;AAC3D,cAAY,UAAU,QAAQ,QAAQ,iBAAiB,EAAE;AAEzD,QAAM,kBAAc,6CAA6B,UAAU;AAE3D,MAAI,eAAe,IAAI;AACrB,YAAQ,IAAI;AAAA,MACV,iDAAiD,UAAU,IAAI,SAAS;AAAA,IAC1E;AACA;AAAA,EACF;AAEA,UAAQ,IAAI;AAAA,IACV,0EAA0E,WAAW,KAAK,UAAU,IAAI,SAAS;AAAA,EACnH;AAGA,SAAM,mCAAS,aAAa,YAAY;AAAA,IACtC,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,GAAG,WAAW,KAAK,UAAU;AAAA,QACjC,IAAI,GAAG,WAAW,KAAK,UAAU;AAAA,MACnC;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,SAAM,mCAAS,aAAa,aAAa,MAAM,WAAW;AAAA,IACxD,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,cAAc,SAAS;AAAA,QAC3B,IAAI,cAAc,SAAS;AAAA,MAC7B;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,MAAI,2CAAa,cAAc,SAAS,eAAe;AACrD,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,aAAa;AAAA,MACjE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,QACN;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAAA,EACF;AAEA,QAAM,aAAS,iDAAmB,WAAW;AAE7C,SAAO,QAAQ,OAAO,UAA2B;AAC/C,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,IAAI;AAAA,MACvE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,MAAM;AAAA,UACV,IAAI,MAAM;AAAA,QACZ;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM,MAAM;AAAA,QACZ,QAAQ,MAAM;AAAA,MAChB;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAAA,EACF,CAAC;AAGD,YAAM,gDAAoB,SAAS,YAAY,WAAW,WAAW;AAErE,MAAI,QAAQ,OAAO,gBAAgB;AAEjC,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,iBAAiB;AAAA,MACrE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,kCAA4B;AAAA,UAChC,IAAI,6BAA6B;AAAA,QACnC;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAEA,cAAM,wDAAwB,SAAS,YAAY,SAAS;AAAA,EAC9D,OAAO;AAAA,EAEP;AACF;",
  "names": []
}

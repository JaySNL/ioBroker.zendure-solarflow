{
  "version": 3,
  "sources": ["../../src/services/webService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\n\r\nconst config: AxiosRequestConfig = {\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Accept-Language\": \"de-DE\",\r\n    appVersion: \"4.3.1\",\r\n    \"User-Agent\": \"Zendure/4.3.1 (iPhone; iOS 14.4.2; Scale/3.00)\",\r\n    Accept: \"*/*\",\r\n    Authorization: \"Basic Q29uc3VtZXJBcHA6NX4qUmRuTnJATWg0WjEyMw==\",\r\n    \"Blade-Auth\": \"bearer (null)\",\r\n  },\r\n  timeout: 10000,\r\n};\r\n\r\nexport const login = (\r\n  adapter: ZendureSolarflow\r\n): Promise<string | undefined> => {\r\n  if (adapter.accessToken) {\r\n    return new Promise((resolve) => {\r\n      if (adapter.accessToken) {\r\n        resolve(adapter.accessToken);\r\n      }\r\n    });\r\n  }\r\n\r\n  const auth = Buffer.from(\r\n    `${adapter.config.userName}:${adapter.config.password}`\r\n  ).toString(\"base64\");\r\n\r\n  if (!config || !config.headers) {\r\n    adapter.log.info(\"[login] Axios config is invalid!\");\r\n    return Promise.reject(undefined);\r\n  }\r\n\r\n  config.headers.Authorization = \"Basic \" + auth;\r\n\r\n  const authBody = {\r\n    password: adapter.config.password,\r\n    account: adapter.config.userName,\r\n    appId: \"121c83f761305d6cf7b\",\r\n    appType: \"iOS\",\r\n    grantType: \"password\",\r\n    tenantId: \"\",\r\n  };\r\n\r\n  if (adapter.paths && adapter.paths.solarFlowTokenUrl) {\r\n    return axios\r\n      .post(adapter.paths.solarFlowTokenUrl, authBody, config)\r\n      .then(function (response) {\r\n        if (response.data.success) {\r\n          adapter.log.info(\"[login] Login to Zendure Rest API successful!\");\r\n          if (response.data?.data?.userId) {\r\n            adapter.userId = response.data?.data?.userId;\r\n          }\r\n\r\n          if (response.data?.data?.accessToken) {\r\n            return response.data.data.accessToken;\r\n          }\r\n        } else {\r\n          return undefined;\r\n        }\r\n      });\r\n  } else {\r\n    return Promise.reject(undefined);\r\n  }\r\n};\r\n\r\nexport const getDeviceList = (\r\n  adapter: ZendureSolarflow\r\n): Promise<ISolarFlowDeviceDetails[]> => {\r\n  adapter.log.debug(\r\n    \"[getDeviceList] Getting device list from Zendure Rest API!\"\r\n  );\r\n\r\n  if (\r\n    adapter &&\r\n    adapter.paths &&\r\n    adapter.accessToken &&\r\n    config &&\r\n    config.headers\r\n  ) {\r\n    config.headers[\"Blade-Auth\"] = \"bearer \" + adapter.accessToken;\r\n\r\n    const body = {};\r\n\r\n    return axios\r\n      .post(\r\n        adapter.paths.solarFlowQueryDeviceListUrl,\r\n        JSON.stringify(body),\r\n        config\r\n      )\r\n      .then(function (response) {\r\n        if (response.data.data && response.data.data.length > 0) {\r\n          return response.data.data as ISolarFlowDeviceDetails[];\r\n        } else {\r\n          return [];\r\n        }\r\n      });\r\n  } else {\r\n    adapter.log.error(\"[getDeviceList] No Access Token found!\");\r\n    return Promise.reject(\"No Access Token found!\");\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAA0C;AAG1C,MAAM,SAA6B;AAAA,EACjC,SAAS;AAAA,IACP,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,IACnB,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,cAAc;AAAA,EAChB;AAAA,EACA,SAAS;AACX;AAEO,MAAM,QAAQ,CACnB,YACgC;AAChC,MAAI,QAAQ,aAAa;AACvB,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,UAAI,QAAQ,aAAa;AACvB,gBAAQ,QAAQ,WAAW;AAAA,MAC7B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,OAAO,OAAO;AAAA,IAClB,GAAG,QAAQ,OAAO,QAAQ,IAAI,QAAQ,OAAO,QAAQ;AAAA,EACvD,EAAE,SAAS,QAAQ;AAEnB,MAAI,CAAC,UAAU,CAAC,OAAO,SAAS;AAC9B,YAAQ,IAAI,KAAK,kCAAkC;AACnD,WAAO,QAAQ,OAAO,MAAS;AAAA,EACjC;AAEA,SAAO,QAAQ,gBAAgB,WAAW;AAE1C,QAAM,WAAW;AAAA,IACf,UAAU,QAAQ,OAAO;AAAA,IACzB,SAAS,QAAQ,OAAO;AAAA,IACxB,OAAO;AAAA,IACP,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA,EACZ;AAEA,MAAI,QAAQ,SAAS,QAAQ,MAAM,mBAAmB;AACpD,WAAO,aAAAA,QACJ,KAAK,QAAQ,MAAM,mBAAmB,UAAU,MAAM,EACtD,KAAK,SAAU,UAAU;AApDhC;AAqDQ,UAAI,SAAS,KAAK,SAAS;AACzB,gBAAQ,IAAI,KAAK,+CAA+C;AAChE,aAAI,oBAAS,SAAT,mBAAe,SAAf,mBAAqB,QAAQ;AAC/B,kBAAQ,UAAS,oBAAS,SAAT,mBAAe,SAAf,mBAAqB;AAAA,QACxC;AAEA,aAAI,oBAAS,SAAT,mBAAe,SAAf,mBAAqB,aAAa;AACpC,iBAAO,SAAS,KAAK,KAAK;AAAA,QAC5B;AAAA,MACF,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACL,OAAO;AACL,WAAO,QAAQ,OAAO,MAAS;AAAA,EACjC;AACF;AAEO,MAAM,gBAAgB,CAC3B,YACuC;AACvC,UAAQ,IAAI;AAAA,IACV;AAAA,EACF;AAEA,MACE,WACA,QAAQ,SACR,QAAQ,eACR,UACA,OAAO,SACP;AACA,WAAO,QAAQ,YAAY,IAAI,YAAY,QAAQ;AAEnD,UAAM,OAAO,CAAC;AAEd,WAAO,aAAAA,QACJ;AAAA,MACC,QAAQ,MAAM;AAAA,MACd,KAAK,UAAU,IAAI;AAAA,MACnB;AAAA,IACF,EACC,KAAK,SAAU,UAAU;AACxB,UAAI,SAAS,KAAK,QAAQ,SAAS,KAAK,KAAK,SAAS,GAAG;AACvD,eAAO,SAAS,KAAK;AAAA,MACvB,OAAO;AACL,eAAO,CAAC;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACL,OAAO;AACL,YAAQ,IAAI,MAAM,wCAAwC;AAC1D,WAAO,QAAQ,OAAO,wBAAwB;AAAA,EAChD;AACF;",
  "names": ["axios"]
}

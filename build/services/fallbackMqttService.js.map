{
  "version": 3,
  "sources": ["../../src/services/fallbackMqttService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport mqtt from \"mqtt\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { generateUniqSerial } from \"../helpers/uuidHelper\";\r\nimport { IPackData } from \"../models/IPackData\";\r\nimport { updateSolarFlowState } from \"./adapterService\";\r\nimport { ISolarFlowMqttProperties } from \"../models/ISolarFlowMqttProperties\";\r\nimport { setEnergyWhMax } from \"./calculationService\";\r\nimport { createSolarFlowStates } from \"../helpers/createSolarFlowStates\";\r\nimport {\r\n  startCalculationJob,\r\n  startCheckStatesAndConnectionJob,\r\n  startResetValuesJob,\r\n} from \"./jobSchedule\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\n\r\nlet adapter: ZendureSolarflow | undefined = undefined;\r\n\r\nexport const addOrUpdatePackData = async (\r\n  productKey: string,\r\n  deviceKey: string,\r\n  packData: IPackData[]\r\n): Promise<void> => {\r\n  if (adapter && productKey && deviceKey) {\r\n    await packData.forEach(async (x) => {\r\n      // Process data only with a serial id!\r\n      if (x.sn && adapter) {\r\n        // create a state for the serial id\r\n        const key = (\r\n          productKey +\r\n          \".\" +\r\n          deviceKey +\r\n          \".packData.\" +\r\n          x.sn\r\n        ).replace(adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n        await adapter?.extendObject(key + \".sn\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"Seriennummer\",\r\n              en: \"Serial id\",\r\n            },\r\n            type: \"string\",\r\n            desc: \"Serial ID\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setState(key + \".sn\", x.sn, true);\r\n\r\n        if (x.socLevel) {\r\n          // State f\u00FCr socLevel\r\n          await adapter?.extendObject(key + \".socLevel\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"SOC der Batterie\",\r\n                en: \"soc of battery\",\r\n              },\r\n              type: \"number\",\r\n              desc: \"SOC Level\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setState(key + \".socLevel\", x.socLevel, true);\r\n        }\r\n\r\n        if (x.maxTemp) {\r\n          // State f\u00FCr maxTemp\r\n          await adapter?.extendObject(key + \".maxTemp\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"Max. Temperatur der Batterie\",\r\n                en: \"max temp. of battery\",\r\n              },\r\n              type: \"number\",\r\n              desc: \"Max. Temp\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          // Convert Kelvin to Celsius\r\n          await adapter?.setState(\r\n            key + \".maxTemp\",\r\n            x.maxTemp / 10 - 273.15,\r\n            true\r\n          );\r\n        }\r\n\r\n        if (x.minVol) {\r\n          await adapter?.extendObject(key + \".minVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"minVol\",\r\n              type: \"number\",\r\n              desc: \"minVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setState(key + \".minVol\", x.minVol / 100, true);\r\n        }\r\n\r\n        if (x.maxVol) {\r\n          await adapter?.extendObject(key + \".maxVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"maxVol\",\r\n              type: \"number\",\r\n              desc: \"maxVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setState(key + \".maxVol\", x.maxVol / 100, true);\r\n        }\r\n\r\n        if (x.totalVol) {\r\n          await adapter?.extendObject(key + \".totalVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"totalVol\",\r\n              type: \"number\",\r\n              desc: \"totalVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          const totalVol = x.totalVol / 100;\r\n\r\n          await adapter?.setState(key + \".totalVol\", totalVol, true);\r\n\r\n          // Send Voltage to checkVoltage Method - Check Voltage makes no sense, as no control is possible in fallback mode!\r\n          //checkVoltage(adapter, productKey, deviceKey, totalVol);\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst onMessage = async (topic: string, message: Buffer): Promise<void> => {\r\n  if (adapter) {\r\n    let obj: ISolarFlowMqttProperties = {};\r\n    try {\r\n      //console.log(\"Topic: \" + topic);\r\n      //console.log(\"Message: \" + message.toString());\r\n      obj = JSON.parse(message.toString());\r\n    } catch (e) {\r\n      const txt = message.toString();\r\n      adapter.log.error(`[JSON PARSE ERROR] ${txt}`);\r\n      return;\r\n    }\r\n\r\n    const topicSplitted = topic.split(\"/\");\r\n    let productKey = topicSplitted[0];\r\n    const deviceKey = topicSplitted[1];\r\n\r\n    //console.log(\"productKey: \" + productKey + \" / deviceKey: \" + deviceKey);\r\n\r\n    if (deviceKey == \"sensor\" || deviceKey == \"switch\") {\r\n      return;\r\n    }\r\n\r\n    if (productKey == \"E8OdVAA4\") {\r\n      // E8OdVAA4 vom Dev MQTT ist 73bkTV vom App MQTT - wir \u00FCberschreiben diesen damit die angelegten States beim Umswitchen des MQTT weitergenutzt werden k\u00F6nnen.\r\n      productKey = \"73bkTV\";\r\n    }\r\n\r\n    if (\r\n      !adapter.deviceList.some(\r\n        (x) => x.deviceKey == deviceKey && x.productKey == productKey\r\n      )\r\n    ) {\r\n      // Create an \"fake\" device\r\n      const device: ISolarFlowDeviceDetails = {\r\n        productName: \"Solarflow2.0\",\r\n        deviceKey: deviceKey,\r\n        productKey: productKey,\r\n      };\r\n      adapter.deviceList.push(device);\r\n\r\n      // Wir erstellen bzw. aktualisieren die States, erfolgt im \"normalen\" MQTT in der main.ts\r\n      await createSolarFlowStates(adapter, device);\r\n\r\n      await updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"registeredServer\",\r\n        adapter.config.server\r\n      );\r\n    }\r\n\r\n    // set lastUpdate for deviceKey\r\n    updateSolarFlowState(\r\n      adapter,\r\n      productKey,\r\n      deviceKey,\r\n      \"lastUpdate\",\r\n      new Date().getTime()\r\n    );\r\n\r\n    if (obj?.electricLevel != null && obj?.electricLevel != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"electricLevel\",\r\n        obj.electricLevel\r\n      );\r\n\r\n      if (adapter?.config.useCalculation && obj.electricLevel == 100) {\r\n        setEnergyWhMax(adapter, productKey, deviceKey);\r\n      }\r\n    }\r\n\r\n    if (obj?.packState != null && obj?.packState != undefined) {\r\n      const value =\r\n        obj?.packState == 0\r\n          ? \"Idle\"\r\n          : obj?.packState == 1\r\n            ? \"Charging\"\r\n            : obj?.packState == 2\r\n              ? \"Discharging\"\r\n              : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packState\", value);\r\n    }\r\n\r\n    if (obj?.passMode != null && obj?.passMode != undefined) {\r\n      const value =\r\n        obj?.passMode == 0\r\n          ? \"Automatic\"\r\n          : obj?.passMode == 1\r\n            ? \"Always off\"\r\n            : obj?.passMode == 2\r\n              ? \"Always on\"\r\n              : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"passMode\", value);\r\n    }\r\n\r\n    if (obj?.pass != null && obj?.pass != undefined) {\r\n      const value = obj?.pass == 0 ? false : true;\r\n\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"pass\", value);\r\n    }\r\n\r\n    if (obj?.autoRecover != null && obj?.autoRecover != undefined) {\r\n      const value = obj?.autoRecover == 0 ? false : true;\r\n\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"autoRecover\",\r\n        value\r\n      );\r\n    }\r\n\r\n    if (obj?.outputHomePower != null && obj?.outputHomePower != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputHomePower\",\r\n        obj.outputHomePower\r\n      );\r\n    }\r\n\r\n    if (obj?.outputLimit != null && obj?.outputLimit != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputLimit\",\r\n        obj.outputLimit\r\n      );\r\n    }\r\n\r\n    if (obj?.buzzerSwitch != null && obj?.buzzerSwitch != undefined) {\r\n      const value = obj?.buzzerSwitch == 0 ? false : true;\r\n\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"buzzerSwitch\",\r\n        value\r\n      );\r\n    }\r\n\r\n    if (obj?.outputPackPower != null && obj?.outputPackPower != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        obj.outputPackPower\r\n      );\r\n\r\n      // if outPutPackPower set packInputPower to 0\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packInputPower\", 0);\r\n    }\r\n\r\n    if (obj?.packInputPower != null && obj?.packInputPower != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"packInputPower\",\r\n        obj.packInputPower\r\n      );\r\n\r\n      // if packInputPower set outputPackPower to 0\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        0\r\n      );\r\n    }\r\n\r\n    if (obj?.solarInputPower != null && obj?.solarInputPower != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"solarInputPower\",\r\n        obj.solarInputPower\r\n      );\r\n    }\r\n\r\n    if (obj?.pvPower1 != null && obj?.pvPower1 != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\", // Reversed to adjust like offical app\r\n        obj.pvPower1\r\n      );\r\n    }\r\n\r\n    if (obj?.pvPower2 != null && obj?.pvPower2 != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\", // Reversed to adjust like offical app\r\n        obj.pvPower2\r\n      );\r\n    }\r\n\r\n    if (obj?.solarPower1 != null && obj?.solarPower1 != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\",\r\n        obj.solarPower1\r\n      );\r\n    }\r\n\r\n    if (obj?.solarPower2 != null && obj?.solarPower2 != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\",\r\n        obj.solarPower2\r\n      );\r\n    }\r\n\r\n    if (obj?.remainOutTime != null && obj?.remainOutTime != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainOutTime\",\r\n        obj.remainOutTime\r\n      );\r\n    }\r\n\r\n    if (obj?.remainInputTime != null && obj?.remainInputTime != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainInputTime\",\r\n        obj.remainInputTime\r\n      );\r\n    }\r\n\r\n    if (obj?.socSet != null && obj?.socSet != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"socSet\",\r\n        Number(obj.socSet) / 10\r\n      );\r\n    }\r\n\r\n    if (obj?.minSoc != null && obj?.minSoc != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"minSoc\",\r\n        Number(obj.minSoc) / 10\r\n      );\r\n    }\r\n\r\n    if (obj?.pvBrand != null && obj?.pvBrand != undefined) {\r\n      const value =\r\n        obj?.pvBrand == 0\r\n          ? \"Others\"\r\n          : obj?.pvBrand == 1\r\n            ? \"Hoymiles\"\r\n            : obj?.pvBrand == 2\r\n              ? \"Enphase\"\r\n              : obj?.pvBrand == 3\r\n                ? \"APSystems\"\r\n                : obj?.pvBrand == 4\r\n                  ? \"Anker\"\r\n                  : obj?.pvBrand == 5\r\n                    ? \"Deye\"\r\n                    : obj?.pvBrand == 6\r\n                      ? \"Bosswerk\"\r\n                      : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"pvBrand\", value);\r\n    }\r\n\r\n    if (obj?.inverseMaxPower != null && obj?.inverseMaxPower != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"inverseMaxPower\",\r\n        obj.inverseMaxPower\r\n      );\r\n    }\r\n\r\n    if (obj?.wifiState != null && obj?.wifiState != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"wifiState\",\r\n        obj.wifiState == 1 ? \"Connected\" : \"Disconnected\"\r\n      );\r\n    }\r\n\r\n    if (obj?.hubState != null && obj?.hubState != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"hubState\",\r\n        obj.hubState == 0\r\n          ? \"Stop output and standby\"\r\n          : \"Stop output and shut down\"\r\n      );\r\n    }\r\n\r\n    if (obj.packData) {\r\n      addOrUpdatePackData(productKey, deviceKey, obj.packData);\r\n    }\r\n  }\r\n};\r\n\r\nconst onConnected = (): void => {\r\n  adapter?.log.info(\"[onConnected] Connected with MQTT!\");\r\n};\r\n\r\nconst onError = (error: any): void => {\r\n  adapter?.log.error(\"Connection to MQTT failed! Error: \" + error);\r\n};\r\n\r\nconst onSubscribeReportTopic: any = (error: Error | null) => {\r\n  if (error) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + error);\r\n  } else {\r\n    adapter?.log.debug(\"Subscription of Report Topic successful!\");\r\n  }\r\n};\r\n\r\nexport const connectFallbackMqttClient = (\r\n  _adapter: ZendureSolarflow,\r\n  appKey: string,\r\n  secret: string,\r\n  mqttServer: string,\r\n  mqttPort: number\r\n): boolean => {\r\n  //console.log(\"connectFallbackMqttClient\");\r\n  adapter = _adapter;\r\n\r\n  const options: mqtt.IClientOptions = {\r\n    clientId: generateUniqSerial(),\r\n    username: appKey,\r\n    password: secret,\r\n    clean: true,\r\n    protocolVersion: 5,\r\n  };\r\n\r\n  if (mqtt && adapter && adapter.paths && adapter.deviceList) {\r\n    adapter.log.debug(\r\n      `[connectMqttClient] Connecting to DEV MQTT broker ${\r\n        mqttServer + \":\" + mqttPort\r\n      }...`\r\n    );\r\n    adapter.mqttClient = mqtt.connect(\r\n      \"mqtt://\" + mqttServer + \":\" + mqttPort,\r\n      options\r\n    ); // create a client\r\n\r\n    if (adapter && adapter.mqttClient) {\r\n      adapter.mqttClient.on(\"connect\", onConnected);\r\n      adapter.mqttClient.on(\"error\", onError);\r\n\r\n      // Subscribe to Topic (appkey von Zendure)\r\n\r\n      if (adapter) {\r\n        const reportTopic = `${appKey}/#`;\r\n\r\n        adapter.log.debug(\r\n          `[connectMqttClient] Subscribing to MQTT Topic: ${reportTopic}`\r\n        );\r\n        adapter.mqttClient?.subscribe(reportTopic, onSubscribeReportTopic);\r\n      }\r\n\r\n      adapter.mqttClient.on(\"message\", onMessage);\r\n\r\n      // Job starten die states in der Nacht zu resetten\r\n      startResetValuesJob(adapter);\r\n\r\n      // Job starten die States zu checken\r\n      startCheckStatesAndConnectionJob(adapter);\r\n\r\n      // Calculation Job starten sofern aktiviert\r\n      if (adapter.config.useCalculation) {\r\n        startCalculationJob(adapter);\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n"],
  "mappings": "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",
  "names": ["mqtt"]
}
